@page "/app/questions"
@using Exam.Common.Dtos.Exam.Categories
@inject IQuestionService QuestionService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Category</MudText>
<MudGrid>
    <MudItem xs="12" sm="12" md="12">
        <MudCard Elevation="25" Style="height:100%;">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Link="/app/categories/new" Color="Color.Primary">Create</MudButton>

                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent Class="px-0">
                <MudGrid>
                    <MudItem xs="12" md="12">
                        <MudTable Items="@Elements" FixedHeader="true" FixedFooter="false" Height="400px">
                            <HeaderContent>
                                <MudTh>QuestionType</MudTh>
                                <MudTh>Level</MudTh>
                                <MudTh>Content</MudTh>
                                <MudTh>Action</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="URL">@context.QuestionType</MudTd>
                                <MudTd DataLabel="URL">@context.Level</MudTd>
                                <MudTd DataLabel="Content">@context.Content</MudTd>
                                <MudTd>
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="()=>NavigateToEdit(context.Id)" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" Class="ma-2" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="async ()=>await OnDeleteTask(context.Id)" Variant="Variant.Filled" Color="Color.Error" Size="Size.Large" Class="ma-2" />

                                </MudTd>
                            </RowTemplate>

                            <PagerContent>
                                <Pagination MetaData="MetaData" Spread="5" SelectedPage="SelectedPage"></Pagination>
                            </PagerContent>
                        </MudTable>
                    </MudItem>
                </MudGrid>


            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

<MudOverlay Visible="loading" DarkBackground="true" Absolute="true">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>

@code{

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [CascadingParameter]
    private Error Error { set; get; }

    public bool loading = false;

    private string DeleteId { set; get; }
    private List<QuestionDto> Elements = new List<QuestionDto>();
    public MetaData MetaData { get; set; } = new MetaData();

    private QuestionFilter _filter = new QuestionFilter();



    protected override async Task OnInitializedAsync()
    {
        await GetTasks();
    }

    public async Task SearchData(QuestionFilter filter)
    {
        _filter = filter;
        await GetTasks();
    }

    public async Task OnDeleteTask(string deleteId)
    {
        DeleteId = deleteId;
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete these records? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<ConfirmationDialog>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await QuestionService.DeleteAsync(DeleteId);
            await GetTasks();
        }
    }

    private async Task GetTasks()
    {
        loading = true;
        try
        {
            var result = await QuestionService.GetCategoriesPagingAsync(_filter);
            Elements = result.ResultObj.Items;
            MetaData = result.ResultObj.MetaData;
            loading = false;
        }
        catch (Exception ex)
        {
            Error.ProcessError(ex);
            loading = false;
        }

    }

    private async Task SelectedPage(int page)
    {
        _filter.PageNumber = page;
        await GetTasks();
    }

    private void NavigateToEdit(string id)
    {
        //NavigationManager.NavigateTo($"/app/categories/details/{id}");
    }
}